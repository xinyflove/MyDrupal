<?php/** * Add body classes if certain regions have content. */function xftheme_preprocess_html(&$variables) {    //  drupal_add_js(path_to_theme() . '/js/system_crud.js');    //  drupal_add_js(path_to_theme() . '/js/camera_crud.js');     //drupal_add_js(path_to_theme() . '/js/datagrid-detailview.js');  //  print_r($variables['theme_hook_suggestions']);}/* hook_theme *  */function xftheme_theme($existing, $type, $theme, $path) {    $items = array();    $items['user_login_block'] = array(        'render element' => 'form',        'template' => 'templates/user-login',    );    return $items;}/** * Override or insert variables into the page template for HTML output. */function xftheme_process_html(&$variables) {    }/** * Override or insert variables into the page template. */function xftheme_process_page(&$variables) {    // Always print the site name and slogan, but if they are toggled off, we'll    // just hide them visually.    $variables['hide_site_name'] = theme_get_setting('toggle_name') ? FALSE : TRUE;    $variables['hide_site_slogan'] = theme_get_setting('toggle_slogan') ? FALSE : TRUE;    if ($variables['hide_site_name']) {        // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.        $variables['site_name'] = filter_xss_admin(variable_get('site_name', 'Drupal'));    }    if ($variables['hide_site_slogan']) {        // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we rebuild it.        $variables['site_slogan'] = filter_xss_admin(variable_get('site_slogan', ''));    }    // Since the title and the shortcut link are both block level elements,    // positioning them next to each other is much simpler with a wrapper div.    if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {        // Add a wrapper div using the title_prefix and title_suffix render elements.        $variables['title_prefix']['shortcut_wrapper'] = array(            '#markup' => '<div class="shortcut-wrapper clearfix">',            '#weight' => 100,        );        $variables['title_suffix']['shortcut_wrapper'] = array(            '#markup' => '</div>',            '#weight' => -99,        );        // Make sure the shortcut link is the first item in title_suffix.        $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;    } // print_r($variables['theme_hook_suggestions']);}/** * Override or insert variables into the node template. */function xftheme_preprocess_node(&$variables) {    if ($variables['view_mode'] == 'full' && node_is_page($variables['node'])) {        $variables['classes_array'][] = 'node-full';    }    //  print_r($variables['theme_hook_suggestions']);}/** * Override or insert variables into the block template. */function xftheme_preprocess_block(&$variables) {    // In the header region visually hide block titles.    if ($variables['block']->region == 'header') {        $variables['title_attributes_array']['class'][] = 'element-invisible';    }}/** * Implements theme_menu_tree(). */function xftheme_menu_tree($variables) {    return  '<ul id="main-super-menu" class="sf-menu">'.$variables['tree'].'</ul>';}/** * Implements theme_menu_tree() for oakadmin menu. *//*function xftheme_menu_tree__main_menu($variables) {    return '<div class="easyui-accordion" style="width:180px;">' . $variables['tree'] . '</div>';}*/function xftheme_links__system_main_menu($variables) {  $html = '';  $html .= "  <ul>\n";    $i = 0;   foreach ($variables['links'] as $mid=>$link) {    $html .= "<li>".l('<span class="bg0'.$i.'">'.$link['title'].'</span>', $link['href'], array('html' => TRUE,'attributes'=>array('onClick'=>'refreshContent(this); return false;') ))."</li>";    $i ++;   }  $html .= "  </ul>\n";  return $html;}/** * Theme the oakadmin_oakadmin_menu. */function xftheme_menu_link__main_menu(&$variables) {    $element = $variables['element'];     $sub_menu = '';    print_r($variables); exit;    if (!$element['#original_link']['plid']) { //there is the first level menu        if ($element['#original_link']['has_children']) { //has a submenu             $parameters = array(                'active_trail' => array($element['#original_link']['plid']),                'only_active_trail' => FALSE,                'min_depth' => $element['#original_link']['depth'] + 1,                'max_depth' => $element['#original_link']['depth'] + 1,                'conditions' => array('plid' => $element['#original_link']['mlid']),            );            $children = menu_build_tree('main-menu', $parameters);            $i = 0;             foreach ($children as $link) {         //       $link['link']['localized_options']['attributes']['class'][] = 'easyui-linkbutton';                $link['link']['localized_options']['attributes']['data-options'][] = 'iconCls:\'icon-add\'';                $link['link']['localized_options']['attributes']['plain'][] = 'true';                $link['link']['localized_options']['attributes']['iconAlign'][] = 'top';                $link['link']['localized_options']['attributes']['onclick'] = 'openTab("'.$link['link']['title'].'","'.$link['link']['href'].'");return false;';                //   $sub_menu .=  '<a href="'.url($link['link']['href']).'" class="easyui-linkbutton" data-options="iconCls:\'icon-add\'">'.$link['link']['title'].'</a>';               //  $sub_menu .= '<div>'.l($link['link']['title'], $link['link']['href'], $link['link']['localized_options']).'</li>';                $sub_menu .= '<li><a href="javascript:void(0)" url ="/'.$link['link']['href'].'" onClick="refreshContent(this); return false;">'.$link['link']['title'].'</a></li>';                $i ++;             }        }     //return '<div title="' . $element['#title'] . '" data-options="iconCls:\'icon-'.$element['#original_link']['mlid'].'\'" style="overflow:auto;padding:2px;"><ul id="menu-tree-'.$element['#original_link']['mlid'].'" class="easyui-tree">'.$sub_menu . '</ul></div>';        if($sub_menu != ''){            return '<li><a href="javascript:void(0)" class="" id="mb-'.$element['#original_link']['mlid'].'"><span class="bg'.$element['#original_link']['mlid'].'">'.$element['#title'].'</span></a><ul style="display:none">'.$sub_menu.'</ul></li>';             }else{            return '<li><a href="javascript:void(0)" class="" url="'.$element['#original_link']['href'].'" onClick="refreshContent(this); return false;" id="mb-'.$element['#original_link']['mlid'].'">'.$element['#title'].'</a></li>';             }              }}/** * Implements theme_menu_link(). *//*function xftheme_menu_link(array $variables) {    $element = $variables['element'];    $sub_menu = '';    if ($element['#below']) {        $sub_menu = drupal_render($element['#below']);    }    $output = l($element['#title'], $element['#href'], $element['#localized_options']);    return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . '<div class = "submenucont">' . $sub_menu . "</div></li>\n";}*//** * Implements theme_field__field_type(). */function xftheme_field__taxonomy_term_reference($variables) {    $output = '';    // Render the label, if it's not hidden.    if (!$variables['label_hidden']) {        $output .= '<h3 class="field-label">' . $variables['label'] . ': </h3>';    }    // Render the items.    $output .= ($variables['element']['#label_display'] == 'inline') ? '<ul class="links inline">' : '<ul class="links">';    foreach ($variables['items'] as $delta => $item) {        $output .= '<li class="taxonomy-term-reference-' . $delta . '"' . $variables['item_attributes'][$delta] . '>' . drupal_render($item) . '</li>';    }    $output .= '</ul>';    // Render the top-level DIV.    $output = '<div class="' . $variables['classes'] . (!in_array('clearfix', $variables['classes_array']) ? ' clearfix' : '') . '"' . $variables['attributes'] . '>' . $output . '</div>';    return $output;}